mixin img_src(source, ego, identity)
	img(srcset= source alt= ego class= '' + identity)
	//for bundle change on img(src=source alt= ego class= '' + identity)


mixin logoGroup(color)
	svg(width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg")
		|<path d="M23.9989 32.4712C23.2224 32.4712 22.5871 31.8359 22.5871 31.0594C22.5871 25.6241 18.14 21.177 12.7047 21.177C11.9283 21.177 11.293 20.5418 11.293 19.7653C11.293 18.9888 11.9283 18.3535 12.7047 18.3535C19.7283 18.3535 25.4106 24.0359 25.4106 31.0594C25.4106 31.8359 24.7753 32.4712 23.9989 32.4712Z" fill=#{color} fill-opacity="0.25"/>
		|<path d="M36.7068 19.7653C36.7068 20.5418 36.0715 21.177 35.295 21.177C31.9421 21.177 28.9421 22.8712 27.1774 25.4476C26.7892 24.4594 26.3303 23.5418 25.7656 22.6947C28.095 20.0123 31.5186 18.3535 35.295 18.3535C36.0715 18.3535 36.7068 18.9888 36.7068 19.7653Z" fill=#{color} fill-opacity="0.25"/>
		|<path d="M24 48C10.7647 48 0 37.2353 0 24C0 10.7647 10.7647 0 24 0C37.2353 0 48 10.7647 48 24C48 37.2353 37.2353 48 24 48ZM24 2.82353C12.3176 2.82353 2.82353 12.3176 2.82353 24C2.82353 35.6824 12.3176 45.1765 24 45.1765C35.6824 45.1765 45.1765 35.6824 45.1765 24C45.1765 12.3176 35.6824 2.82353 24 2.82353Z" fill=#{color} fill-opacity="0.25"/>

mixin formCommon(mission, styleClass, explicitSpan, isOption, uniqueId)
	form.form(class= styleClass)
		div.form__legend_wrapper
			h3= mission
			if explicitSpan
				h3.form_explain
					span= explicitSpan
		div.form__item_wrap
			input.form__item(id='common_form_input_' + uniqueId)&attributes(attributes)
			if(isOption ==='subscribe')
					svg.form__item_arrow(width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg")
						|<path d="M9 0.984375L17.0156 9L9 17.0156L7.59375 15.6094L13.1719 9.98438H0.984375V8.01562H13.1719L7.59375 2.39062L9 0.984375Z" fill="url(#paint0_linear)"/>
						|<defs>
						|<linearGradient id="paint0_linear" x1="9" y1="-13" x2="9" y2="31" gradientUnits="userSpaceOnUse">
						|<stop stop-color="#BC9CFF"/>
						|<stop offset="1" stop-color="#8BA4F9"/>
						|</linearGradient>
						|</defs>
			else if(isOption === 'dateDropdown')
				div.expanders_wrap
					svg.more(width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg" id='more_' + uniqueId)
						| <path d="M10.5938 0.578125L12 1.98438L6 7.98438L0 1.98438L1.40625 0.578125L6 5.17188L10.5938 0.578125Z" fill="#1F2041" fill-opacity="0.75"/>
						| </svg>
					svg.less(width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg" id='less_' + uniqueId)
						| <path d="M1.40625 7.42187L1.74709e-06 6.01562L6 0.0156231L12 6.01562L10.5938 7.42187L6 2.82812L1.40625 7.42187Z" fill="#1F2041" fill-opacity="0.5"/>
						| </svg>


//mixin checkForm(value, boolean)
//	input(type= 'checkbox' value= value
//		if boolean
//			checked)

mixin formCheckbox(legend, isExpandable, isExpanded, itemName, isRich, values)
	-var idForCheck = 1
	form.checkbox
		h3(id='checkbox_' + itemName class=['checkbox_main-label'])= legend
			if isExpandable === 'expandable'
				div.expanders_wrap
					svg.more(width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg" id='more_' + itemName class=[isExpanded + '_more'])
						| <path d="M10.5938 0.578125L12 1.98438L6 7.98438L0 1.98438L1.40625 0.578125L6 5.17188L10.5938 0.578125Z" fill="#1F2041" fill-opacity="0.75"/>
						| </svg>
					svg.less(width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg" id='less_' + itemName class=[isExpanded + '_less'])
						| <path d="M1.40625 7.42187L1.74709e-06 6.01562L6 0.0156231L12 6.01562L10.5938 7.42187L6 2.82812L1.40625 7.42187Z" fill="#1F2041" fill-opacity="0.5"/>
						| </svg>
		ul(id='checkbox_dropdown_field_' + itemName class = ['checkbox_dropdown_field_' + isExpandable, '' + isExpanded])
			if(isRich === 'rich')

				for option, key in values
					li.checkbox__group
						input.checkbox__item(type= 'checkbox' id=itemName + '_' + (idForCheck
						) class=itemName + '_' + idForCheck)
						label.checkbox__item__label(for=itemName + '_' + (idForCheck++
						))
							div.checkbox__item__label_wrapp
								h3= key
								p!= option
			else
				for option in values
					li.checkbox__group
						input.checkbox__item(type= 'checkbox' id=itemName + '_' + (idForCheck) class=itemName + '_' + idForCheck)
						label.checkbox__item__label(for=itemName + '_' + (idForCheck++))
							p!= option

mixin formRadio(legend, itemName, ...values)
	- var idForCheck = 1
	form.radio
		h3= legend
		for value in values
			input.radio__item(type= 'radio' name= itemName id=itemName + '_' + idForCheck class=itemName + '_' + idForCheck)
			label.radio__item_label(for=itemName + '_' + idForCheck++)= value

mixin formToggle(value, mission, legend)
	- var idForCheck = 1
	form.toggle
		if legend
			h3= legend
		input.toggle__item(type= 'checkbox' id=mission + '_' + idForCheck class= mission + '_' + idForCheck)
		label.toggle__item_label(for= mission + '_' + idForCheck++)= value


mixin buttonLike(amount, uniqueId, specialClass)
		div.buttonLike(id='buttonLike_' + uniqueId class=['like' + specialClass, specialClass])
			div.buttonLike__like_wrap
				svg(class=['buttonLike__like_wrap_likeDef', 'likeDef'] width="10" height="8" viewBox="0 0 10 8" fill="none" xmlns="http://www.w3.org/2000/svg")
					|<path d="M5.03906 6.73438C5.66406 6.17448 6.1263 5.7513 6.42578 5.46484C6.72526 5.17839 7.05078 4.83984 7.40234 4.44922C7.75391 4.05859 7.99479 3.71354 8.125 3.41406C8.26823 3.11458 8.33984 2.82161 8.33984 2.53516C8.33984 2.11849 8.19661 1.77344 7.91016 1.5C7.63672 1.22656 7.29167 1.08984 6.875 1.08984C6.54948 1.08984 6.24349 1.18099 5.95703 1.36328C5.68359 1.54557 5.49479 1.77995 5.39062 2.06641H4.60938C4.50521 1.77995 4.3099 1.54557 4.02344 1.36328C3.75 1.18099 3.45052 1.08984 3.125 1.08984C2.70833 1.08984 2.35677 1.22656 2.07031 1.5C1.79688 1.77344 1.66016 2.11849 1.66016 2.53516C1.66016 2.82161 1.72526 3.11458 1.85547 3.41406C1.9987 3.71354 2.24609 4.05859 2.59766 4.44922C2.94922 4.83984 3.27474 5.17839 3.57422 5.46484C3.8737 5.7513 4.33594 6.17448 4.96094 6.73438L5 6.77344L5.03906 6.73438ZM6.875 0.25C7.52604 0.25 8.06641 0.471354 8.49609 0.914062C8.9388 1.35677 9.16016 1.89714 9.16016 2.53516C9.16016 2.91276 9.08854 3.28385 8.94531 3.64844C8.80208 4 8.53516 4.39714 8.14453 4.83984C7.76693 5.28255 7.42188 5.65365 7.10938 5.95312C6.79688 6.2526 6.29557 6.71484 5.60547 7.33984L5 7.88672L4.39453 7.35938C3.49609 6.55208 2.84505 5.94661 2.44141 5.54297C2.05078 5.13932 1.6862 4.66406 1.34766 4.11719C1.00911 3.57031 0.839844 3.04297 0.839844 2.53516C0.839844 1.89714 1.05469 1.35677 1.48438 0.914062C1.92708 0.471354 2.47396 0.25 3.125 0.25C3.88021 0.25 4.50521 0.542969 5 1.12891C5.49479 0.542969 6.11979 0.25 6.875 0.25Z" fill="#1F2041" fill-opacity="0.25"/>
				svg(class=['buttonLike__like_wrap_likeColor', 'likeColor'] width="10" height="8" viewBox="0 0 10 8" fill="none" xmlns="http://www.w3.org/2000/svg")
					|<path d="M4.93026 7.88672L4.3248 7.33984C3.63469 6.71484 3.13339 6.2526 2.82089 5.95312C2.50839 5.65365 2.15683 5.28255 1.7662 4.83984C1.3886 4.39714 1.12818 4 0.984952 3.64844C0.841723 3.28385 0.770108 2.91276 0.770108 2.53516C0.770108 1.89714 0.984952 1.35677 1.41464 0.914062C1.85735 0.471354 2.40422 0.25 3.05526 0.25C3.81047 0.25 4.43547 0.542969 4.93026 1.12891C5.42506 0.542969 6.05006 0.25 6.80526 0.25C7.45631 0.25 7.99667 0.471354 8.42636 0.914062C8.86907 1.35677 9.09042 1.89714 9.09042 2.53516C9.09042 3.04297 8.92115 3.57031 8.58261 4.11719C8.24407 4.66406 7.87297 5.13932 7.46933 5.54297C7.0787 5.94661 6.43417 6.55208 5.53573 7.35938L4.93026 7.88672Z" fill="url(#paint0_linear)"/>
					|<defs>
					|<linearGradient id="paint0_linear" x1="4.93026" y1="-6" x2="4.93026" y2="14" gradientUnits="userSpaceOnUse">
					|<stop stop-color="#BC9CFF"/>
					|<stop offset="1" stop-color="#8BA4F9"/>
					|</linearGradient>

			p(id='likeCount_' + uniqueId class=['buttonLike__like_counter_' + specialClass, 'buttonLike__like_counter'])= amount

mixin rangeRate(name)
	form.rangeRate(name= name)
			each item in [5, 4, 3, 2, 1]
				input.rangeRate__item(type= 'radio' name= name id= 'chunk_' + name + '_' + item value= item)
				label.rangeRate__item_label(for= 'chunk_' + name + '_' + item)

mixin rangeSlider(min, max, legend)
	- var rangeDif = max/1.5
	form.rangeSlider
		h3= legend
		div.rangeSlider__values
			span(id='range1')
			span &#32; - &#32;
			span(id='range2')
		div.rangeSlider_wrapper
			div.rangeSlider_slider-track
				div.rangeSlider_slider-track_diff
			input.rangeSlider__item(type='range' id='slider-1' min=min max=max value=rangeDif/2  oninput=('slideOne()'))
			input.rangeSlider__item(type='range' id='slider-2' min=min max=max value=rangeDif oninput=('slideTwo()'))



mixin buttonCommon(label, isBuy, ...classes)
	div.buttonCommon
		button.buttonCommon__button(class= classes)&attributes(attributes)= label
			if(isBuy === 'toBuy')
				svg(width="18" height="17" viewBox="0 0 18 17" xmlns="http://www.w3.org/2000/svg")
					| <path d="M9 0.426758L17.0156 8.44238L9 16.458L7.59375 15.0518L13.1719 9.42676H0.984375V7.45801H13.1719L7.59375 1.83301L9 0.426758Z"/>

mixin pagination(legend)
	h3.pagination_wrapper__label= legend
	div.pagination_wrapper
		div.pagination
		p 1-12 из 100+ вариантов аренды

mixin dropdown(dropdownAim, legend, mission, explicitSpan, specialClass, legends)

	//- dropdown wrap
	div.dropdown(class= ['form'])
		div.form__legend_wrapper
			h3= mission
			if explicitSpan
				h3.form_explain
					span= explicitSpan
		//- dropdown input field
		div.dropdown_input_wrap
			input.dropdown__input(id='dropdown_input_'+legend type='text' class=['dropdown_'+dropdownAim])&attributes(attributes)
			div.expanders_wrap
				svg.more(width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg" id='more_'+legend class=[specialClass + '_more'])
					|<path d="M10.5938 0.578125L12 1.98438L6 7.98438L0 1.98438L1.40625 0.578125L6 5.17188L10.5938 0.578125Z" fill="#1F2041" fill-opacity="0.75"/>
					|</svg>
				svg.less(width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg" id='less_'+legend class=[specialClass + '_less'])
					|<path d="M1.40625 7.42187L1.74709e-06 6.01562L6 0.0156231L12 6.01562L10.5938 7.42187L6 2.82812L1.40625 7.42187Z" fill="#1F2041" fill-opacity="0.5"/>
					|</svg>
		//- dropdown slide-down-field
		div.dropdown__field(id='dropdown__field_' + legend class=['dropdown__field'+ legend, '' + specialClass])
			//- each dropdown line set
			div.dropdown__field_item
				//- dropdown line legend
				h3(id='amount_legend_1_' + legend)= legends[0]
				//- calc functions wrap
				div.calc_wrap
					//- calc button decrement
					div.counter_wrap(class=['counter_wrap_' + legend] id='decrement_1_' + legend)
						span.counter(class= ['decrement'] ) -
					//- calc results
					h3(id='amount_1_' + legend) 0
					//- calc button increment
					div.counter_wrap(class=['counter_wrap_' + legend] id='increment_1_' + legend)
						span.counter(class =['increment']  ) +
			div.dropdown__field_item
				h3(id='amount_legend_2_' + legend)= legends[1]
				div.calc_wrap
					div.counter_wrap(class=['counter_wrap_' + legend] id='decrement_2_' + legend)
						span.counter(class =['decrement']  ) -
					h3(id='amount_2_' + legend) 0
					div.counter_wrap(class=['counter_wrap_' + legend] id='increment_2_' + legend)
						span.counter(class =['increment']  ) +
			div.dropdown__field_item
				h3(id='amount_legend_3_' + legend)= legends[2]
				div.calc_wrap
					div.counter_wrap(class=['counter_wrap_' + legend] id='decrement_3_' + legend)
						span.counter(class =['decrement']  ) -
					h3(id='amount_3_' + legend) 0
					div.counter_wrap(class=['counter_wrap_' + legend] id='increment_3_' + legend)
						span.counter(class =['increment']  ) +
			if dropdownAim === 'guests'
				div.dropdown_buttons
					h3.dropdown_buttons__confirm(id= 'confirm_' + legend) Применить
					h3.dropdown_buttons__clear(id= 'clear_' + legend) Очистить


mixin bulletList(legend, values)
	h3.bulletList_main_label= legend
	ul.bulletList
		for option in values
			li.bulletList__item
				p!=option

mixin someGoods(legend, describe)
	div.good_wrap
		div.good
			if block
				block
			div.good__label_wrap
				h3.good__label= legend
				p.good__describe= describe
		hr.good__line/

mixin comment(name, imgSrc, date, text)
	div.comment_wrap
		div.comment__header
			img.comment__pic(src=imgSrc)
			div.comment__info
				h2.comment__name= name
				p.comment_data= date
		div.comment__body
			div.comment__like_wrap
				+buttonLike('12', 'like_checked_comment_' + name, 'buttonLike_done')
			p.comment__text= text